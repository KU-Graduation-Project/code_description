{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\hpe-example-main\\\\hpe-example-main\\\\my-app\\\\src\\\\Components\\\\detail\\\\Detail1.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"./styles.css\";\nimport arrayData from \"./arrayData\";\nimport WebSocket, { WebSocketServer } from \"ws\";\nimport ApexChart from 'apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet user1_hr = 0;\nlet user1_rp = 0;\nlet user1_tp = 0;\nconst str = 'user1';\nconst PADDING = 20;\nconst MAX_VALUE = 110;\nconst Y_TICK = 4;\nconst DURATION = 1000 * 20; // *30->2초에 한번, *10->1초에 한번\nconst EX_TIME = \"00:00\";\nfunction LineChart1(_ref) {\n  _s();\n  let {\n    id\n  } = _ref;\n  let post1 = user1_hr;\n  const [data, setData] = useState([[Date.now(), post1]]);\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = timeInterval / DURATION * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n      xTimeInterval = timeInterval;\n    };\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n      let currentTime = startTime - startTime % xTimeInterval;\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = (currentTime - startTime) / DURATION * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = (time - startTime) / DURATION * chartWidth;\n        const yPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post1]]);\n\n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n    return () => clearTimeout(tick);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: id,\n    width: \"420px\",\n    height: \"300px\",\n    children: \"Heart Rate\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(LineChart1, \"Z0K8ngcv41Ad13HxX5YZ/nRq6B0=\");\n_c = LineChart1;\nfunction LineChart2(_ref2) {\n  _s2();\n  let {\n    id\n  } = _ref2;\n  let post2 = user1_rp;\n  const [data, setData] = useState([[Date.now(), post2]]);\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = timeInterval / DURATION * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n      xTimeInterval = timeInterval;\n    };\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n      let currentTime = startTime - startTime % xTimeInterval;\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = (currentTime - startTime) / DURATION * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = (time - startTime) / DURATION * chartWidth;\n        const yPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post2]]);\n\n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n    return () => clearTimeout(tick);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: id,\n    width: \"420px\",\n    height: \"300px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n}\n_s2(LineChart2, \"J2nTEoRXliUPo4qj9xhY4EgyuXw=\");\n_c2 = LineChart2;\nfunction LineChart3(_ref3) {\n  _s3();\n  let {\n    id\n  } = _ref3;\n  let post3 = user1_tp;\n  const [data, setData] = useState([[Date.now(), post3]]);\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = timeInterval / DURATION * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n      xTimeInterval = timeInterval;\n    };\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n      let currentTime = startTime - startTime % xTimeInterval;\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = (currentTime - startTime) / DURATION * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = (time - startTime) / DURATION * chartWidth;\n        const yPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post3]]);\n\n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n    return () => clearTimeout(tick);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: id,\n    width: \"420px\",\n    height: \"300px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 339,\n    columnNumber: 5\n  }, this);\n}\n\n// 심박수 : 60 ~ 100 beats\n// 호흡수 : 1분에 12 ~ 20회\n_s3(LineChart3, \"xRpWNiks2p4xXZmVN0G6FrwvDmQ=\");\n_c3 = LineChart3;\nfunction Getdata1() {\n  var options = {\n    series: [{\n      name: \"Respiration Rate\",\n      data: [45, 52, 38, 24, 33, 26, 21, 20, 6, 8, 15, 10]\n    }, {\n      name: \"Body Temperature\",\n      data: [35, 41, 62, 42, 13, 18, 29, 37, 36, 51, 32, 35]\n    }, {\n      name: 'Heart Rate',\n      data: [87, 57, 74, 99, 75, 38, 62, 47, 82, 56, 45, 47]\n    }],\n    chart: {\n      height: 400,\n      type: 'line',\n      zoom: {\n        enabled: false\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    stroke: {\n      width: [5, 7, 5],\n      curve: 'straight',\n      dashArray: [0, 8, 5]\n    },\n    title: {\n      text: 'Vital Signal',\n      align: 'left'\n    },\n    legend: {\n      tooltipHoverFormatter: function (val, opts) {\n        return val + ' - ' + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + '';\n      }\n    },\n    markers: {\n      size: 0,\n      hover: {\n        sizeOffset: 6\n      }\n    },\n    xaxis: {\n      categories: ['01 Jan', '02 Jan', '03 Jan', '04 Jan', '05 Jan', '06 Jan', '07 Jan', '08 Jan', '09 Jan', '10 Jan', '11 Jan', '12 Jan']\n    },\n    tooltip: {\n      y: [{\n        title: {\n          formatter: function (val) {\n            return val + \" (mins)\";\n          }\n        }\n      }, {\n        title: {\n          formatter: function (val) {\n            return val + \" per session\";\n          }\n        }\n      }, {\n        title: {\n          formatter: function (val) {\n            return val;\n          }\n        }\n      }]\n    },\n    grid: {\n      borderColor: '#f1f1f1'\n    }\n  };\n  var chart = new ApexChart(document.querySelector(\"#chart\"), options);\n  chart.render();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chart\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 430,\n    columnNumber: 5\n  }, this);\n}\n_c4 = Getdata1;\nfunction Getdata2() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"chart2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 437,\n    columnNumber: 5\n  }, this);\n}\n_c5 = Getdata2;\nconst Detail = () => {\n  _s4();\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    const WebSocket = require('ws');\n    const socket = new window.WebSocket('ws://localhost:8080');\n    socket.onmessage = event => {\n      setMessage(event.data);\n      let parse_data = JSON.parse(event.data);\n      let ur = parse_data.user;\n      let hr = parse_data.heartrate;\n      let rp = parse_data.resp;\n      let tp = parse_data.temp;\n      if (ur === str) {\n        console.log('ur: ' + ur);\n        console.log('hr: ' + hr);\n        console.log('rp: ' + rp);\n        console.log('tp: ' + tp);\n        user1_hr = hr;\n        user1_rp = rp;\n        user1_tp = tp;\n        // console.log(message + \"수신\");\n      }\n    };\n\n    return () => {\n      if (socket.readyState === 1) {\n        socket.close();\n      }\n    };\n  }, []);\n\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     setMessage(getData());\n\n  // }, 1000);\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"detail\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title1\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"title11\",\n          children: \"Heart Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 56\n        }, this), /*#__PURE__*/_jsxDEV(LineChart1, {\n          className: \"chart\",\n          id: \"HR_lineChart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"title12\",\n          children: \"Respiration Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 62\n        }, this), /*#__PURE__*/_jsxDEV(LineChart2, {\n          className: \"chart\",\n          id: \"RR_lineChart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title3\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"title13\",\n          children: \"Body Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 62\n        }, this), /*#__PURE__*/_jsxDEV(LineChart3, {\n          className: \"chart\",\n          id: \"BT_lineChart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 489,\n    columnNumber: 5\n  }, this);\n};\n_s4(Detail, \"3v4ozrfWvlmZ97O5zgyhgDZKC+M=\");\n_c6 = Detail;\nexport default Detail;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"LineChart1\");\n$RefreshReg$(_c2, \"LineChart2\");\n$RefreshReg$(_c3, \"LineChart3\");\n$RefreshReg$(_c4, \"Getdata1\");\n$RefreshReg$(_c5, \"Getdata2\");\n$RefreshReg$(_c6, \"Detail\");","map":{"version":3,"names":["React","useEffect","useState","arrayData","WebSocket","WebSocketServer","ApexChart","jsxDEV","_jsxDEV","user1_hr","user1_rp","user1_tp","str","PADDING","MAX_VALUE","Y_TICK","DURATION","EX_TIME","LineChart1","_ref","_s","id","post1","data","setData","Date","now","canvas","document","getElementById","ctx","getContext","canvasWidth","clientWidth","canvasHeight","clientHeight","chartWidth","chartHeight","xFormatWidth","measureText","width","endTime","startTime","xTimeInterval","setXInterval","xPoint","timeInterval","setTime","drawChart","clearRect","beginPath","moveTo","lineTo","yInterval","textAlign","textBaseLine","i","value","YPoint","fillText","stroke","save","rect","clip","currentTime","date","text","getMinutes","getSeconds","forEach","datum","index","time","yPoint","restore","window","requestAnimationFrame","tick","setTimeout","before","length","slice","clearTimeout","height","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","LineChart2","_ref2","_s2","post2","_c2","LineChart3","_ref3","_s3","post3","_c3","Getdata1","options","series","name","chart","type","zoom","enabled","dataLabels","curve","dashArray","title","align","legend","tooltipHoverFormatter","val","opts","w","globals","seriesIndex","dataPointIndex","markers","size","hover","sizeOffset","xaxis","categories","tooltip","y","formatter","grid","borderColor","querySelector","render","_c4","Getdata2","_c5","Detail","_s4","message","setMessage","require","socket","onmessage","event","parse_data","JSON","parse","ur","user","hr","heartrate","rp","resp","tp","temp","console","log","readyState","close","className","_c6","$RefreshReg$"],"sources":["C:/Users/user/Downloads/hpe-example-main/hpe-example-main/my-app/src/Components/detail/Detail1.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"./styles.css\";\nimport arrayData from \"./arrayData\";\nimport WebSocket, {WebSocketServer} from \"ws\";\nimport ApexChart from 'apexcharts'\n\nlet user1_hr = 0;\nlet user1_rp = 0;\nlet user1_tp = 0;\nconst str = 'user1';\n\nconst PADDING = 20;\nconst MAX_VALUE = 110;\nconst Y_TICK = 4;\nconst DURATION = 1000 * 20; // *30->2초에 한번, *10->1초에 한번\nconst EX_TIME = \"00:00\";\n\nfunction LineChart1({ id }) {\n  let post1 = user1_hr;\n  const [data, setData] = useState([[Date.now(), post1]]);  \n\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = (timeInterval / DURATION) * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n\n      xTimeInterval = timeInterval;\n    };\n\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING-2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n\n      let currentTime = startTime - (startTime % xTimeInterval);\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = ((currentTime - startTime) / DURATION) * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = ((time - startTime) / DURATION) * chartWidth;\n        const yPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post1]]);\n        \n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n\n    return () => clearTimeout(tick);\n  }, [data]);\n\n  return (\n    <canvas id={id} width=\"420px\" height=\"300px\">Heart Rate</canvas>\n  );\n}\n\nfunction LineChart2({ id }) {\n  let post2 = user1_rp;\n  const [data, setData] = useState([[Date.now(), post2]]);  \n\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = (timeInterval / DURATION) * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n\n      xTimeInterval = timeInterval;\n    };\n\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING-2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n\n      let currentTime = startTime - (startTime % xTimeInterval);\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = ((currentTime - startTime) / DURATION) * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = ((time - startTime) / DURATION) * chartWidth;\n        const yPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post2]]);\n        \n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n\n    return () => clearTimeout(tick);\n  }, [data]);\n\n  return (\n    <canvas id={id} width=\"420px\" height=\"300px\"></canvas>\n  );\n}\n\nfunction LineChart3({ id }) {\n  let post3 = user1_tp;\n  const [data, setData] = useState([[Date.now(), post3]]);  \n\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = (timeInterval / DURATION) * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n\n      xTimeInterval = timeInterval;\n    };\n\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING-2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n\n      let currentTime = startTime - (startTime % xTimeInterval);\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = ((currentTime - startTime) / DURATION) * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = ((time - startTime) / DURATION) * chartWidth;\n        const yPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post3]]);\n        \n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n\n    return () => clearTimeout(tick);\n  }, [data]);\n\n  return (\n    <canvas id={id} width=\"420px\" height=\"300px\"></canvas>\n  );\n}\n\n// 심박수 : 60 ~ 100 beats\n// 호흡수 : 1분에 12 ~ 20회\nfunction Getdata1() {  \n  var options = {\n    series: [{\n      name: \"Respiration Rate\",\n      data: [45, 52, 38, 24, 33, 26, 21, 20, 6, 8, 15, 10]\n    },\n    {\n      name: \"Body Temperature\",\n      data: [35, 41, 62, 42, 13, 18, 29, 37, 36, 51, 32, 35]\n    },\n    {\n      name: 'Heart Rate',\n      data: [87, 57, 74, 99, 75, 38, 62, 47, 82, 56, 45, 47]\n    }\n  ],\n    chart: {\n    height: 400,\n    type: 'line',\n    zoom: {\n      enabled: false\n    },\n  },\n  dataLabels: {\n    enabled: false\n  },\n  stroke: {\n    width: [5, 7, 5],\n    curve: 'straight',\n    dashArray: [0, 8, 5]\n  },\n  title: {\n    text: 'Vital Signal',\n    align: 'left'\n  },\n  legend: {\n    tooltipHoverFormatter: function(val, opts) {\n      return val + ' - ' + opts.w.globals.series[opts.seriesIndex][opts.dataPointIndex] + ''\n    }\n  },\n  markers: {\n    size: 0,\n    hover: {\n      sizeOffset: 6\n    }\n  },\n  xaxis: {\n    categories: ['01 Jan', '02 Jan', '03 Jan', '04 Jan', '05 Jan', '06 Jan', '07 Jan', '08 Jan', '09 Jan',\n      '10 Jan', '11 Jan', '12 Jan'\n    ],\n  },\n  tooltip: {\n    y: [\n      {\n        title: {\n          formatter: function (val) {\n            return val + \" (mins)\"\n          }\n        }\n      },\n      {\n        title: {\n          formatter: function (val) {\n            return val + \" per session\"\n          }\n        }\n      },\n      {\n        title: {\n          formatter: function (val) {\n            return val;\n          }\n        }\n      }\n    ]\n  },\n  grid: {\n    borderColor: '#f1f1f1',\n  }\n  };\n\n  var chart = new ApexChart(document.querySelector(\"#chart\"), options);\n  chart.render();\n\n\n  return (\n    <div id=\"chart\"></div>\n  );\n}\n\nfunction Getdata2() {\n\n  return (\n    <div id=\"chart2\"></div>\n  );\n}\n\nconst Detail = () => {\n\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const WebSocket = require('ws');\n\n    const socket = new window.WebSocket('ws://localhost:8080');\n    socket.onmessage = (event) => {\n      setMessage(event.data);\n      \n      let parse_data = JSON.parse(event.data)\n      let ur = parse_data.user\n      let hr = parse_data.heartrate\n      let rp = parse_data.resp\n      let tp = parse_data.temp\n      \n      if (ur===str){\n        console.log('ur: '+ur)\n        console.log('hr: '+hr)\n        console.log('rp: '+rp)\n        console.log('tp: '+tp)\n        user1_hr=hr;\n        user1_rp=rp;\n        user1_tp=tp;\n        // console.log(message + \"수신\");\n      }\n    };\n\n    return () => {\n      if(socket.readyState===1){\n        socket.close();\n      }\n    };\n  }, []);\n\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     setMessage(getData());\n\n  // }, 1000);\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, []);\n  \n\n  return (\n    <div className=\"detail\">\n      {/* {<Getdata1 id=\"apexchart\" />}  */}\n      {/* <ApexChart/> */}\n\n      <p>{message}</p>\n      <div id=\"parent\">\n        <div id=\"title1\"><p id=\"title11\">Heart Rate</p><br/>\n        {<LineChart1 className=\"chart\" id=\"HR_lineChart\" />}\n        </div>\n        <div id=\"title2\"><p id=\"title12\">Respiration Rate</p><br/>\n        {<LineChart2 className=\"chart\" id=\"RR_lineChart\" />}\n        </div>\n        <div id=\"title3\"><p id=\"title13\">Body Temperature</p><br/>\n        {<LineChart3 className=\"chart\" id=\"BT_lineChart\" />}\n        </div>\n      </div>\n      {/* <p className=\"signal\">Heart Rate</p>\n      <p className=\"signal\">Respiration Rate</p>\n      <p className=\"signal\">Body Temperature</p> */}\n    </div>\n  );\n}\n\nexport default Detail;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}