{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uServer = void 0;\nconst debug_1 = require(\"debug\");\nconst server_1 = require(\"./server\");\nconst transports_uws_1 = require(\"./transports-uws\");\nconst debug = (0, debug_1.default)(\"engine:uws\");\nclass uServer extends server_1.BaseServer {\n  init() {}\n  cleanup() {}\n  /**\n   * Prepares a request by processing the query string.\n   *\n   * @api private\n   */\n  prepare(req, res) {\n    req.method = req.getMethod().toUpperCase();\n    req.url = req.getUrl();\n    const params = new URLSearchParams(req.getQuery());\n    req._query = Object.fromEntries(params.entries());\n    req.headers = {};\n    req.forEach((key, value) => {\n      req.headers[key] = value;\n    });\n    req.connection = {\n      remoteAddress: Buffer.from(res.getRemoteAddressAsText()).toString()\n    };\n    res.onAborted(() => {\n      debug(\"response has been aborted\");\n    });\n  }\n  createTransport(transportName, req) {\n    return new transports_uws_1.default[transportName](req);\n  }\n  /**\n   * Attach the engine to a ÂµWebSockets.js server\n   * @param app\n   * @param options\n   */\n  attach(app /* : TemplatedApp */) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const path = this._computePath(options);\n    app.any(path, this.handleRequest.bind(this))\n    //\n    .ws(path, {\n      compression: options.compression,\n      idleTimeout: options.idleTimeout,\n      maxBackpressure: options.maxBackpressure,\n      maxPayloadLength: this.opts.maxHttpBufferSize,\n      upgrade: this.handleUpgrade.bind(this),\n      open: ws => {\n        ws.transport.socket = ws;\n        ws.transport.writable = true;\n        ws.transport.emit(\"drain\");\n      },\n      message: (ws, message, isBinary) => {\n        ws.transport.onData(isBinary ? message : Buffer.from(message).toString());\n      },\n      close: (ws, code, message) => {\n        ws.transport.onClose(code, message);\n      }\n    });\n  }\n  _applyMiddlewares(req, res, callback) {\n    if (this.middlewares.length === 0) {\n      return callback();\n    }\n    // needed to buffer headers until the status is computed\n    req.res = new ResponseWrapper(res);\n    super._applyMiddlewares(req, req.res, () => {\n      // some middlewares (like express-session) wait for the writeHead() call to flush their headers\n      // see https://github.com/expressjs/session/blob/1010fadc2f071ddf2add94235d72224cf65159c6/index.js#L220-L244\n      req.res.writeHead();\n      callback();\n    });\n  }\n  handleRequest(res, req) {\n    debug('handling \"%s\" http request \"%s\"', req.getMethod(), req.getUrl());\n    this.prepare(req, res);\n    req.res = res;\n    this._applyMiddlewares(req, res, () => {\n      this.verify(req, false, (errorCode, errorContext) => {\n        if (errorCode !== undefined) {\n          this.emit(\"connection_error\", {\n            req,\n            code: errorCode,\n            message: server_1.Server.errorMessages[errorCode],\n            context: errorContext\n          });\n          this.abortRequest(req.res, errorCode, errorContext);\n          return;\n        }\n        if (req._query.sid) {\n          debug(\"setting new request for existing client\");\n          this.clients[req._query.sid].transport.onRequest(req);\n        } else {\n          const closeConnection = (errorCode, errorContext) => this.abortRequest(res, errorCode, errorContext);\n          this.handshake(req._query.transport, req, closeConnection);\n        }\n      });\n    });\n  }\n  handleUpgrade(res, req, context) {\n    debug(\"on upgrade\");\n    this.prepare(req, res);\n    req.res = res;\n    this._applyMiddlewares(req, res, () => {\n      this.verify(req, true, async (errorCode, errorContext) => {\n        if (errorCode) {\n          this.emit(\"connection_error\", {\n            req,\n            code: errorCode,\n            message: server_1.Server.errorMessages[errorCode],\n            context: errorContext\n          });\n          this.abortRequest(res, errorCode, errorContext);\n          return;\n        }\n        const id = req._query.sid;\n        let transport;\n        if (id) {\n          const client = this.clients[id];\n          if (!client) {\n            debug(\"upgrade attempt for closed client\");\n            res.close();\n          } else if (client.upgrading) {\n            debug(\"transport has already been trying to upgrade\");\n            res.close();\n          } else if (client.upgraded) {\n            debug(\"transport had already been upgraded\");\n            res.close();\n          } else {\n            debug(\"upgrading existing transport\");\n            transport = this.createTransport(req._query.transport, req);\n            client.maybeUpgrade(transport);\n          }\n        } else {\n          transport = await this.handshake(req._query.transport, req, (errorCode, errorContext) => this.abortRequest(res, errorCode, errorContext));\n          if (!transport) {\n            return;\n          }\n        }\n        // calling writeStatus() triggers the flushing of any header added in a middleware\n        req.res.writeStatus(\"101 Switching Protocols\");\n        res.upgrade({\n          transport\n        }, req.getHeader(\"sec-websocket-key\"), req.getHeader(\"sec-websocket-protocol\"), req.getHeader(\"sec-websocket-extensions\"), context);\n      });\n    });\n  }\n  abortRequest(res, errorCode, errorContext) {\n    const statusCode = errorCode === server_1.Server.errors.FORBIDDEN ? \"403 Forbidden\" : \"400 Bad Request\";\n    const message = errorContext && errorContext.message ? errorContext.message : server_1.Server.errorMessages[errorCode];\n    res.writeStatus(statusCode);\n    res.writeHeader(\"Content-Type\", \"application/json\");\n    res.end(JSON.stringify({\n      code: errorCode,\n      message\n    }));\n  }\n}\nexports.uServer = uServer;\nclass ResponseWrapper {\n  constructor(res) {\n    this.res = res;\n    this.statusWritten = false;\n    this.headers = [];\n  }\n  set statusCode(status) {\n    if (!status) {\n      return;\n    }\n    // FIXME: handle all status codes?\n    this.writeStatus(status === 200 ? \"200 OK\" : \"204 No Content\");\n  }\n  writeHead(status) {\n    this.statusCode = status;\n  }\n  setHeader(key, value) {\n    if (Array.isArray(value)) {\n      value.forEach(val => {\n        this.writeHeader(key, val);\n      });\n    } else {\n      this.writeHeader(key, value);\n    }\n  }\n  removeHeader() {\n    // FIXME: not implemented\n  }\n  // needed by vary: https://github.com/jshttp/vary/blob/5d725d059b3871025cf753e9dfa08924d0bcfa8f/index.js#L134\n  getHeader() {}\n  writeStatus(status) {\n    this.res.writeStatus(status);\n    this.statusWritten = true;\n    this.writeBufferedHeaders();\n  }\n  writeHeader(key, value) {\n    if (key === \"Content-Length\") {\n      // the content length is automatically added by uWebSockets.js\n      return;\n    }\n    if (this.statusWritten) {\n      this.res.writeHeader(key, value);\n    } else {\n      this.headers.push([key, value]);\n    }\n  }\n  writeBufferedHeaders() {\n    this.headers.forEach(_ref => {\n      let [key, value] = _ref;\n      this.res.writeHeader(key, value);\n    });\n  }\n  end(data) {\n    if (!this.statusWritten) {\n      // status will be inferred as \"200 OK\"\n      this.writeBufferedHeaders();\n    }\n    this.res.end(data);\n  }\n  onData(fn) {\n    this.res.onData(fn);\n  }\n  onAborted(fn) {\n    this.res.onAborted(fn);\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","uServer","debug_1","require","server_1","transports_uws_1","debug","default","BaseServer","init","cleanup","prepare","req","res","method","getMethod","toUpperCase","url","getUrl","params","URLSearchParams","getQuery","_query","fromEntries","entries","headers","forEach","key","connection","remoteAddress","Buffer","from","getRemoteAddressAsText","toString","onAborted","createTransport","transportName","attach","app","options","path","_computePath","any","handleRequest","bind","ws","compression","idleTimeout","maxBackpressure","maxPayloadLength","opts","maxHttpBufferSize","upgrade","handleUpgrade","open","transport","socket","writable","emit","message","isBinary","onData","close","code","onClose","_applyMiddlewares","callback","middlewares","length","ResponseWrapper","writeHead","verify","errorCode","errorContext","undefined","Server","errorMessages","context","abortRequest","sid","clients","onRequest","closeConnection","handshake","id","client","upgrading","upgraded","maybeUpgrade","writeStatus","getHeader","statusCode","errors","FORBIDDEN","writeHeader","end","JSON","stringify","constructor","statusWritten","status","setHeader","Array","isArray","val","removeHeader","writeBufferedHeaders","push","data","fn"],"sources":["C:/Users/user/Downloads/hpe-example-main/hpe-example-main/node_modules/engine.io/build/userver.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.uServer = void 0;\nconst debug_1 = require(\"debug\");\nconst server_1 = require(\"./server\");\nconst transports_uws_1 = require(\"./transports-uws\");\nconst debug = (0, debug_1.default)(\"engine:uws\");\nclass uServer extends server_1.BaseServer {\n    init() { }\n    cleanup() { }\n    /**\n     * Prepares a request by processing the query string.\n     *\n     * @api private\n     */\n    prepare(req, res) {\n        req.method = req.getMethod().toUpperCase();\n        req.url = req.getUrl();\n        const params = new URLSearchParams(req.getQuery());\n        req._query = Object.fromEntries(params.entries());\n        req.headers = {};\n        req.forEach((key, value) => {\n            req.headers[key] = value;\n        });\n        req.connection = {\n            remoteAddress: Buffer.from(res.getRemoteAddressAsText()).toString(),\n        };\n        res.onAborted(() => {\n            debug(\"response has been aborted\");\n        });\n    }\n    createTransport(transportName, req) {\n        return new transports_uws_1.default[transportName](req);\n    }\n    /**\n     * Attach the engine to a ÂµWebSockets.js server\n     * @param app\n     * @param options\n     */\n    attach(app /* : TemplatedApp */, options = {}) {\n        const path = this._computePath(options);\n        app\n            .any(path, this.handleRequest.bind(this))\n            //\n            .ws(path, {\n            compression: options.compression,\n            idleTimeout: options.idleTimeout,\n            maxBackpressure: options.maxBackpressure,\n            maxPayloadLength: this.opts.maxHttpBufferSize,\n            upgrade: this.handleUpgrade.bind(this),\n            open: (ws) => {\n                ws.transport.socket = ws;\n                ws.transport.writable = true;\n                ws.transport.emit(\"drain\");\n            },\n            message: (ws, message, isBinary) => {\n                ws.transport.onData(isBinary ? message : Buffer.from(message).toString());\n            },\n            close: (ws, code, message) => {\n                ws.transport.onClose(code, message);\n            },\n        });\n    }\n    _applyMiddlewares(req, res, callback) {\n        if (this.middlewares.length === 0) {\n            return callback();\n        }\n        // needed to buffer headers until the status is computed\n        req.res = new ResponseWrapper(res);\n        super._applyMiddlewares(req, req.res, () => {\n            // some middlewares (like express-session) wait for the writeHead() call to flush their headers\n            // see https://github.com/expressjs/session/blob/1010fadc2f071ddf2add94235d72224cf65159c6/index.js#L220-L244\n            req.res.writeHead();\n            callback();\n        });\n    }\n    handleRequest(res, req) {\n        debug('handling \"%s\" http request \"%s\"', req.getMethod(), req.getUrl());\n        this.prepare(req, res);\n        req.res = res;\n        this._applyMiddlewares(req, res, () => {\n            this.verify(req, false, (errorCode, errorContext) => {\n                if (errorCode !== undefined) {\n                    this.emit(\"connection_error\", {\n                        req,\n                        code: errorCode,\n                        message: server_1.Server.errorMessages[errorCode],\n                        context: errorContext,\n                    });\n                    this.abortRequest(req.res, errorCode, errorContext);\n                    return;\n                }\n                if (req._query.sid) {\n                    debug(\"setting new request for existing client\");\n                    this.clients[req._query.sid].transport.onRequest(req);\n                }\n                else {\n                    const closeConnection = (errorCode, errorContext) => this.abortRequest(res, errorCode, errorContext);\n                    this.handshake(req._query.transport, req, closeConnection);\n                }\n            });\n        });\n    }\n    handleUpgrade(res, req, context) {\n        debug(\"on upgrade\");\n        this.prepare(req, res);\n        req.res = res;\n        this._applyMiddlewares(req, res, () => {\n            this.verify(req, true, async (errorCode, errorContext) => {\n                if (errorCode) {\n                    this.emit(\"connection_error\", {\n                        req,\n                        code: errorCode,\n                        message: server_1.Server.errorMessages[errorCode],\n                        context: errorContext,\n                    });\n                    this.abortRequest(res, errorCode, errorContext);\n                    return;\n                }\n                const id = req._query.sid;\n                let transport;\n                if (id) {\n                    const client = this.clients[id];\n                    if (!client) {\n                        debug(\"upgrade attempt for closed client\");\n                        res.close();\n                    }\n                    else if (client.upgrading) {\n                        debug(\"transport has already been trying to upgrade\");\n                        res.close();\n                    }\n                    else if (client.upgraded) {\n                        debug(\"transport had already been upgraded\");\n                        res.close();\n                    }\n                    else {\n                        debug(\"upgrading existing transport\");\n                        transport = this.createTransport(req._query.transport, req);\n                        client.maybeUpgrade(transport);\n                    }\n                }\n                else {\n                    transport = await this.handshake(req._query.transport, req, (errorCode, errorContext) => this.abortRequest(res, errorCode, errorContext));\n                    if (!transport) {\n                        return;\n                    }\n                }\n                // calling writeStatus() triggers the flushing of any header added in a middleware\n                req.res.writeStatus(\"101 Switching Protocols\");\n                res.upgrade({\n                    transport,\n                }, req.getHeader(\"sec-websocket-key\"), req.getHeader(\"sec-websocket-protocol\"), req.getHeader(\"sec-websocket-extensions\"), context);\n            });\n        });\n    }\n    abortRequest(res, errorCode, errorContext) {\n        const statusCode = errorCode === server_1.Server.errors.FORBIDDEN\n            ? \"403 Forbidden\"\n            : \"400 Bad Request\";\n        const message = errorContext && errorContext.message\n            ? errorContext.message\n            : server_1.Server.errorMessages[errorCode];\n        res.writeStatus(statusCode);\n        res.writeHeader(\"Content-Type\", \"application/json\");\n        res.end(JSON.stringify({\n            code: errorCode,\n            message,\n        }));\n    }\n}\nexports.uServer = uServer;\nclass ResponseWrapper {\n    constructor(res) {\n        this.res = res;\n        this.statusWritten = false;\n        this.headers = [];\n    }\n    set statusCode(status) {\n        if (!status) {\n            return;\n        }\n        // FIXME: handle all status codes?\n        this.writeStatus(status === 200 ? \"200 OK\" : \"204 No Content\");\n    }\n    writeHead(status) {\n        this.statusCode = status;\n    }\n    setHeader(key, value) {\n        if (Array.isArray(value)) {\n            value.forEach((val) => {\n                this.writeHeader(key, val);\n            });\n        }\n        else {\n            this.writeHeader(key, value);\n        }\n    }\n    removeHeader() {\n        // FIXME: not implemented\n    }\n    // needed by vary: https://github.com/jshttp/vary/blob/5d725d059b3871025cf753e9dfa08924d0bcfa8f/index.js#L134\n    getHeader() { }\n    writeStatus(status) {\n        this.res.writeStatus(status);\n        this.statusWritten = true;\n        this.writeBufferedHeaders();\n    }\n    writeHeader(key, value) {\n        if (key === \"Content-Length\") {\n            // the content length is automatically added by uWebSockets.js\n            return;\n        }\n        if (this.statusWritten) {\n            this.res.writeHeader(key, value);\n        }\n        else {\n            this.headers.push([key, value]);\n        }\n    }\n    writeBufferedHeaders() {\n        this.headers.forEach(([key, value]) => {\n            this.res.writeHeader(key, value);\n        });\n    }\n    end(data) {\n        if (!this.statusWritten) {\n            // status will be inferred as \"200 OK\"\n            this.writeBufferedHeaders();\n        }\n        this.res.end(data);\n    }\n    onData(fn) {\n        this.res.onData(fn);\n    }\n    onAborted(fn) {\n        this.res.onAborted(fn);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}