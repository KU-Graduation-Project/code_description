{"ast":null,"code":"// const app = require('express')()\n// const server = require('http').createServer(app)\n// const io = require('socket.io')(server)\n\n// io.on('connection', socket => {\n//     socket.on('message', msg => {\n//         console.log(msg)\n//         console.log(\"receive from client: \", JSON.parse(msg))\n//         ws.send(\"send to client: echo \", JSON.parse(msg)) // python 으로 데이터 보낸다, python에서 data 변수에 들어감\n\n//         let data = JSON.parse(msg)\n//         let ur = data.user\n//         let hr = data.heartrate\n//         let rp = data.resp\n//         let tp = data.temp\n\n//         console.log(ur)\n//         console.log(hr)\n//         console.log(rp)\n//         console.log(tp)\n//     })\n// })\n// server.listen(8080)\n\n// // Require HTTP module (to start server) and Socket.IO\n// var http = require('http');\n// io = require('socket.io');\n\n// // Start the server at port 8080\n// let express = require('express')\n// const app = express()\n// const server = http.createServer(app)\n// // var server = http.createServer(function(req, res){ \n//     // Send HTML headers and message\n//     // res.writeHead(200,{ 'Content-Type': 'text/html' }); \n//     // res.end('<h1>Hello Socket Lover!</h1>');\n// // });\n// server.listen(8080);\n\n// // Create a Socket.IO instance, passing it our server\n// var socket = io(server);\n\n// // Add a connect listener\n// socket.on('connection', function(client){ \n//     // Success!  Now listen to messages to be received\n//     // client.on('message', msg => {\n//     //             console.log(\"receive from client: \", JSON.parse(msg))\n//     //             ws.send(\"send to client: echo \", JSON.parse(msg)) // python 으로 데이터 보낸다, python에서 data 변수에 들어감\n\n//     //             let data = JSON.parse(msg)\n//     //             let ur = data.user\n//     //             let hr = data.heartrate\n//     //             let rp = data.resp\n//     //             let tp = data.temp\n\n//     //             console.log(ur)\n//     //             console.log(hr)\n//     //             console.log(rp)\n//     //             console.log(tp)\n\n//     //             // module.exports = {\n//     //             //     ur, hr, rp, tp\n//     //             // };\n\n//     //         });\n//     client.on('message', msg => { \n//         console.log('Received message from client!',JSON.parse(msg));\n//         let data = JSON.parse(msg)\n//         let ur = data.user\n//         let hr = data.heartrate\n//         let rp = data.resp\n//         let tp = data.temp\n\n//         console.log(ur)\n//         console.log(hr)\n//         console.log(rp)\n//         console.log(tp)\n//     });\n//     // client.on('disconnect',function(){\n//     //     clearInterval(interval);\n//     //     console.log('Server has disconnected');\n//     // });\n\n// });\n\n// import SockJS from 'sockjs-client'\n// const Stomp = require('stompjs');\n// let stompClient;\n\n// const connect = (event) => {\n\n//     if(1) {//'ws://localhost:8080/ws'\n//       var socket = new SockJS('ws://localhost:8080');\n//       stompClient.current = Stomp.over(socket);\n//       stompClient.current.connect({}, () => {\n//         setTimeout(function() {\n//           onConnected()\n//         }, 500)\n//       })\n//     }\n\n// }\n\n/*\r\nconst WebSocket = require('ws');\r\nconst wss = new WebSocket.Server({ port:8080 });\r\n\r\nwss.on('connection', ws => {\r\n    ws.on('message', msg => {\r\n        console.log(\"receive from client: \", JSON.parse(msg))\r\n        ws.send(\"send to client: echo \", JSON.parse(msg)) // python 으로 데이터 보낸다, python에서 data 변수에 들어감\r\n    \r\n        let data = JSON.parse(msg)\r\n        let ur = data.user\r\n        let hr = data.heartrate\r\n        let rp = data.resp\r\n        let tp = data.temp\r\n    \r\n        console.log(ur)\r\n        console.log(hr)\r\n        console.log(rp)\r\n        console.log(tp)\r\n        \r\n        // module.exports = {\r\n        //     ur, hr, rp, tp\r\n        // };\r\n    \r\n    });\r\n    ws.on('close', ()=> {\r\n        console.log('disconnected');\r\n    });\r\n\r\n});\r\n\r\nexport { wss };\r\n*/\n\n// import React from 'react';\nclass server extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentData: []\n    };\n    this.ws = new WebSocket(\"ws://localhost:3333/\");\n  }\n  render() {\n    this.ws.onopen = () => {\n      console.log('Opened Connection!');\n    };\n    this.ws.onmessage = event => {\n      this.setState({\n        currentData: JSON.parse(event.data)\n      });\n    };\n    this.ws.onclose = () => {\n      console.log('Closed Connection!');\n    };\n    const columns = [{\n      Header: 'Name',\n      accessor: 'name'\n    }, {\n      Header: 'Number',\n      accessor: 'number'\n    }];\n    console.log(this.state.currentData);\n    // return (\n    // //   <div className=\"App\">\n\n    // //   </div>\n    // );\n  }\n}\n\nexport default server;","map":{"version":3,"names":["server","React","Component","constructor","props","state","currentData","ws","WebSocket","render","onopen","console","log","onmessage","event","setState","JSON","parse","data","onclose","columns","Header","accessor"],"sources":["C:/Users/user/Downloads/hpe-example-main/hpe-example-main/my-app/src/Components/detail/server.js"],"sourcesContent":["// const app = require('express')()\r\n// const server = require('http').createServer(app)\r\n// const io = require('socket.io')(server)\r\n\r\n// io.on('connection', socket => {\r\n//     socket.on('message', msg => {\r\n//         console.log(msg)\r\n//         console.log(\"receive from client: \", JSON.parse(msg))\r\n//         ws.send(\"send to client: echo \", JSON.parse(msg)) // python 으로 데이터 보낸다, python에서 data 변수에 들어감\r\n    \r\n//         let data = JSON.parse(msg)\r\n//         let ur = data.user\r\n//         let hr = data.heartrate\r\n//         let rp = data.resp\r\n//         let tp = data.temp\r\n    \r\n//         console.log(ur)\r\n//         console.log(hr)\r\n//         console.log(rp)\r\n//         console.log(tp)\r\n//     })\r\n// })\r\n// server.listen(8080)\r\n\r\n// // Require HTTP module (to start server) and Socket.IO\r\n// var http = require('http');\r\n// io = require('socket.io');\r\n\r\n// // Start the server at port 8080\r\n// let express = require('express')\r\n// const app = express()\r\n// const server = http.createServer(app)\r\n// // var server = http.createServer(function(req, res){ \r\n//     // Send HTML headers and message\r\n//     // res.writeHead(200,{ 'Content-Type': 'text/html' }); \r\n//     // res.end('<h1>Hello Socket Lover!</h1>');\r\n// // });\r\n// server.listen(8080);\r\n\r\n// // Create a Socket.IO instance, passing it our server\r\n// var socket = io(server);\r\n\r\n// // Add a connect listener\r\n// socket.on('connection', function(client){ \r\n//     // Success!  Now listen to messages to be received\r\n//     // client.on('message', msg => {\r\n//     //             console.log(\"receive from client: \", JSON.parse(msg))\r\n//     //             ws.send(\"send to client: echo \", JSON.parse(msg)) // python 으로 데이터 보낸다, python에서 data 변수에 들어감\r\n            \r\n//     //             let data = JSON.parse(msg)\r\n//     //             let ur = data.user\r\n//     //             let hr = data.heartrate\r\n//     //             let rp = data.resp\r\n//     //             let tp = data.temp\r\n            \r\n//     //             console.log(ur)\r\n//     //             console.log(hr)\r\n//     //             console.log(rp)\r\n//     //             console.log(tp)\r\n                \r\n//     //             // module.exports = {\r\n//     //             //     ur, hr, rp, tp\r\n//     //             // };\r\n            \r\n//     //         });\r\n//     client.on('message', msg => { \r\n//         console.log('Received message from client!',JSON.parse(msg));\r\n//         let data = JSON.parse(msg)\r\n//         let ur = data.user\r\n//         let hr = data.heartrate\r\n//         let rp = data.resp\r\n//         let tp = data.temp\r\n    \r\n//         console.log(ur)\r\n//         console.log(hr)\r\n//         console.log(rp)\r\n//         console.log(tp)\r\n//     });\r\n//     // client.on('disconnect',function(){\r\n//     //     clearInterval(interval);\r\n//     //     console.log('Server has disconnected');\r\n//     // });\r\n\r\n// });\r\n\r\n// import SockJS from 'sockjs-client'\r\n// const Stomp = require('stompjs');\r\n// let stompClient;\r\n\r\n// const connect = (event) => {\r\n  \r\n//     if(1) {//'ws://localhost:8080/ws'\r\n//       var socket = new SockJS('ws://localhost:8080');\r\n//       stompClient.current = Stomp.over(socket);\r\n//       stompClient.current.connect({}, () => {\r\n//         setTimeout(function() {\r\n//           onConnected()\r\n//         }, 500)\r\n//       })\r\n//     }\r\n  \r\n// }\r\n\r\n/*\r\nconst WebSocket = require('ws');\r\nconst wss = new WebSocket.Server({ port:8080 });\r\n\r\nwss.on('connection', ws => {\r\n    ws.on('message', msg => {\r\n        console.log(\"receive from client: \", JSON.parse(msg))\r\n        ws.send(\"send to client: echo \", JSON.parse(msg)) // python 으로 데이터 보낸다, python에서 data 변수에 들어감\r\n    \r\n        let data = JSON.parse(msg)\r\n        let ur = data.user\r\n        let hr = data.heartrate\r\n        let rp = data.resp\r\n        let tp = data.temp\r\n    \r\n        console.log(ur)\r\n        console.log(hr)\r\n        console.log(rp)\r\n        console.log(tp)\r\n        \r\n        // module.exports = {\r\n        //     ur, hr, rp, tp\r\n        // };\r\n    \r\n    });\r\n    ws.on('close', ()=> {\r\n        console.log('disconnected');\r\n    });\r\n\r\n});\r\n\r\nexport { wss };\r\n*/\r\n\r\n// import React from 'react';\r\nclass server extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentData: []\r\n    };\r\n    this.ws = new WebSocket(\"ws://localhost:3333/\");\r\n  }\r\n\r\n  render() {\r\n    this.ws.onopen = () => {\r\n      console.log('Opened Connection!')\r\n    };\r\n\r\n    this.ws.onmessage = (event) => {\r\n      this.setState({ currentData: JSON.parse(event.data) });\r\n    };\r\n\r\n    this.ws.onclose = () => {\r\n      console.log('Closed Connection!')\r\n    };\r\n\r\n    const columns = [\r\n      { Header: 'Name', accessor: 'name' },\r\n      { Header: 'Number', accessor: 'number' }\r\n    ]\r\n    console.log(this.state.currentData);\r\n    // return (\r\n    // //   <div className=\"App\">\r\n      \r\n    // //   </div>\r\n    // );\r\n  }\r\n}\r\nexport default server;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,MAAM,SAASC,KAAK,CAACC,SAAS,CAAC;EACnCC,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACXC,WAAW,EAAE;IACf,CAAC;IACD,IAAI,CAACC,EAAE,GAAG,IAAIC,SAAS,CAAC,sBAAsB,CAAC;EACjD;EAEAC,MAAM,GAAG;IACP,IAAI,CAACF,EAAE,CAACG,MAAM,GAAG,MAAM;MACrBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAED,IAAI,CAACL,EAAE,CAACM,SAAS,GAAIC,KAAK,IAAK;MAC7B,IAAI,CAACC,QAAQ,CAAC;QAAET,WAAW,EAAEU,IAAI,CAACC,KAAK,CAACH,KAAK,CAACI,IAAI;MAAE,CAAC,CAAC;IACxD,CAAC;IAED,IAAI,CAACX,EAAE,CAACY,OAAO,GAAG,MAAM;MACtBR,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAED,MAAMQ,OAAO,GAAG,CACd;MAAEC,MAAM,EAAE,MAAM;MAAEC,QAAQ,EAAE;IAAO,CAAC,EACpC;MAAED,MAAM,EAAE,QAAQ;MAAEC,QAAQ,EAAE;IAAS,CAAC,CACzC;IACDX,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,KAAK,CAACC,WAAW,CAAC;IACnC;IACA;;IAEA;IACA;EACF;AACF;;AACA,eAAeN,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}