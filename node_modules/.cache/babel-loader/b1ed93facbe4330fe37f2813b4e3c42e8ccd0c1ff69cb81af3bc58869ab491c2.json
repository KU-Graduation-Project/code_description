{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\hpe-example-main\\\\hpe-example-main\\\\my-app\\\\src\\\\Components\\\\detail\\\\Detail4.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"./styles.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet user4_hr = 0;\nlet user4_rp = 0;\nlet user4_tp = 0;\nconst str = 'user4';\nconst PADDING = 20;\nconst MAX_VALUE = 110;\nconst Y_TICK = 4;\nconst DURATION = 1000 * 20; // *30->2초에 한번, *10->1초에 한번\nconst EX_TIME = \"00:00\";\nfunction LineChart1(_ref) {\n  _s();\n  let {\n    id\n  } = _ref;\n  let post1 = user4_hr;\n  const [data, setData] = useState([[Date.now(), post1]]);\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = timeInterval / DURATION * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n      xTimeInterval = timeInterval;\n    };\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n      let currentTime = startTime - startTime % xTimeInterval;\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = (currentTime - startTime) / DURATION * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = (time - startTime) / DURATION * chartWidth;\n        const yPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n          ctx.strokeStyle = 'rgb(255,0,0)';\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n          ctx.strokeStyle = 'rgb(255,0,0)';\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post1]]);\n\n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n    return () => clearTimeout(tick);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: id,\n    width: \"420px\",\n    height: \"300px\",\n    children: \"Heart Rate\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n}\n_s(LineChart1, \"Z0K8ngcv41Ad13HxX5YZ/nRq6B0=\");\n_c = LineChart1;\nfunction LineChart2(_ref2) {\n  _s2();\n  let {\n    id\n  } = _ref2;\n  let post2 = user4_rp;\n  const [data, setData] = useState([[Date.now(), post2]]);\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = timeInterval / DURATION * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n      xTimeInterval = timeInterval;\n    };\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n      let currentTime = startTime - startTime % xTimeInterval;\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = (currentTime - startTime) / DURATION * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = (time - startTime) / DURATION * chartWidth;\n        const yPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n          ctx.strokeStyle = 'rgb(0,128,0)';\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n          ctx.strokeStyle = 'rgb(0,128,0)';\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post2]]);\n\n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n    return () => clearTimeout(tick);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: id,\n    width: \"420px\",\n    height: \"300px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n}\n_s2(LineChart2, \"J2nTEoRXliUPo4qj9xhY4EgyuXw=\");\n_c2 = LineChart2;\nfunction LineChart3(_ref3) {\n  _s3();\n  let {\n    id\n  } = _ref3;\n  let post3 = user4_tp;\n  const [data, setData] = useState([[Date.now(), post3]]);\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = timeInterval / DURATION * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n      xTimeInterval = timeInterval;\n    };\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n      let currentTime = startTime - startTime % xTimeInterval;\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = (currentTime - startTime) / DURATION * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = (time - startTime) / DURATION * chartWidth;\n        const yPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n          ctx.strokeStyle = 'rgb(0,0,255)';\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n          ctx.strokeStyle = 'rgb(0,0,255)';\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post3]]);\n\n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n    return () => clearTimeout(tick);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: id,\n    width: \"420px\",\n    height: \"300px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 341,\n    columnNumber: 5\n  }, this);\n}\n\n// 심박수 : 60 ~ 100 beats\n// 호흡수 : 1분에 12 ~ 20회\n_s3(LineChart3, \"xRpWNiks2p4xXZmVN0G6FrwvDmQ=\");\n_c3 = LineChart3;\nconst Detail = () => {\n  _s4();\n  const [message, setMessage] = useState('');\n  useEffect(() => {\n    const WebSocket = require('ws');\n    const socket = new window.WebSocket('ws://localhost:8080');\n    socket.onmessage = event => {\n      setMessage(event.data);\n      let parse_data = JSON.parse(event.data);\n      let ur = parse_data.user;\n      let gx = parse_data.g_x;\n      let gy = parse_data.g_y;\n      let gz = parse_data.g_z;\n\n      // let hr = parse_data.heartrate\n      // let rp = parse_data.resp\n      // let tp = parse_data.temp\n\n      let hr = parse_data.g_x;\n      let rp = parse_data.g_y;\n      let tp = parse_data.g_z;\n      console.log('hr: ' + hr);\n      console.log('rp: ' + rp);\n      console.log('tp: ' + tp);\n\n      // if (ur===str){\n      //   console.log('ur: '+ur)\n      //   console.log('hr: '+hr)\n      //   console.log('rp: '+rp)\n      //   console.log('tp: '+tp)\n      //   user4_hr=hr;\n      //   user4_rp=rp;\n      //   user4_tp=tp;\n      //   // console.log(message + \"수신\");\n      // }\n    };\n\n    return () => {\n      if (socket.readyState === 1) {\n        socket.close();\n      }\n    };\n  }, []);\n\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     setMessage(getData());\n\n  // }, 1000);\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"detail\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title1\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"title11\",\n          children: \"Heart Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 56\n        }, this), /*#__PURE__*/_jsxDEV(LineChart1, {\n          className: \"chart\",\n          id: \"HR_lineChart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title2\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"title12\",\n          children: \"Respiration Rate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 62\n        }, this), /*#__PURE__*/_jsxDEV(LineChart2, {\n          className: \"chart\",\n          id: \"RR_lineChart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title3\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"title13\",\n          children: \"Body Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 26\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 62\n        }, this), /*#__PURE__*/_jsxDEV(LineChart3, {\n          className: \"chart\",\n          id: \"BT_lineChart\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 10\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 5\n  }, this);\n};\n_s4(Detail, \"3v4ozrfWvlmZ97O5zgyhgDZKC+M=\");\n_c4 = Detail;\nexport default Detail;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"LineChart1\");\n$RefreshReg$(_c2, \"LineChart2\");\n$RefreshReg$(_c3, \"LineChart3\");\n$RefreshReg$(_c4, \"Detail\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","user4_hr","user4_rp","user4_tp","str","PADDING","MAX_VALUE","Y_TICK","DURATION","EX_TIME","LineChart1","_ref","_s","id","post1","data","setData","Date","now","canvas","document","getElementById","ctx","getContext","canvasWidth","clientWidth","canvasHeight","clientHeight","chartWidth","chartHeight","xFormatWidth","measureText","width","endTime","startTime","xTimeInterval","setXInterval","xPoint","timeInterval","setTime","drawChart","clearRect","beginPath","moveTo","lineTo","yInterval","textAlign","textBaseLine","i","value","YPoint","fillText","stroke","save","rect","clip","currentTime","date","text","getMinutes","getSeconds","forEach","datum","index","time","yPoint","strokeStyle","restore","window","requestAnimationFrame","tick","setTimeout","before","length","slice","clearTimeout","height","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","LineChart2","_ref2","_s2","post2","_c2","LineChart3","_ref3","_s3","post3","_c3","Detail","_s4","message","setMessage","WebSocket","require","socket","onmessage","event","parse_data","JSON","parse","ur","user","gx","g_x","gy","g_y","gz","g_z","hr","rp","tp","console","log","readyState","close","className","_c4","$RefreshReg$"],"sources":["C:/Users/user/Downloads/hpe-example-main/hpe-example-main/my-app/src/Components/detail/Detail4.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n\nlet user4_hr = 0;\nlet user4_rp = 0;\nlet user4_tp = 0;\nconst str = 'user4';\n\nconst PADDING = 20;\nconst MAX_VALUE = 110;\nconst Y_TICK = 4;\nconst DURATION = 1000 * 20; // *30->2초에 한번, *10->1초에 한번\nconst EX_TIME = \"00:00\";\n\nfunction LineChart1({ id }) {\n  let post1 = user4_hr;\n  const [data, setData] = useState([[Date.now(), post1]]);  \n\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = (timeInterval / DURATION) * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n\n      xTimeInterval = timeInterval;\n    };\n\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING-2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n\n      let currentTime = startTime - (startTime % xTimeInterval);\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = ((currentTime - startTime) / DURATION) * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = ((time - startTime) / DURATION) * chartWidth;\n        const yPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n          ctx.strokeStyle='rgb(255,0,0)'\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n          ctx.strokeStyle='rgb(255,0,0)'\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post1]]);\n        \n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n\n    return () => clearTimeout(tick);\n  }, [data]);\n\n  return (\n    <canvas id={id} width=\"420px\" height=\"300px\">Heart Rate</canvas>\n  );\n}\n\nfunction LineChart2({ id }) {\n  let post2 = user4_rp;\n  const [data, setData] = useState([[Date.now(), post2]]);  \n\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = (timeInterval / DURATION) * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n\n      xTimeInterval = timeInterval;\n    };\n\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING-2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n\n      let currentTime = startTime - (startTime % xTimeInterval);\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = ((currentTime - startTime) / DURATION) * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = ((time - startTime) / DURATION) * chartWidth;\n        const yPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n          ctx.strokeStyle='rgb(0,128,0)'\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n          ctx.strokeStyle='rgb(0,128,0)'\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post2]]);\n        \n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n\n    return () => clearTimeout(tick);\n  }, [data]);\n\n  return (\n    <canvas id={id} width=\"420px\" height=\"300px\"></canvas>\n  );\n}\n\nfunction LineChart3({ id }) {\n  let post3 = user4_tp;\n  const [data, setData] = useState([[Date.now(), post3]]);  \n\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = (timeInterval / DURATION) * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n\n      xTimeInterval = timeInterval;\n    };\n\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING-2, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n\n      let currentTime = startTime - (startTime % xTimeInterval);\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = ((currentTime - startTime) / DURATION) * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = ((time - startTime) / DURATION) * chartWidth;\n        const yPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n          ctx.strokeStyle='rgb(0,0,255)'\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n          ctx.strokeStyle='rgb(0,0,255)'\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post3]]);\n        \n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n\n    return () => clearTimeout(tick);\n  }, [data]);\n\n  return (\n    <canvas id={id} width=\"420px\" height=\"300px\"></canvas>\n  );\n}\n\n// 심박수 : 60 ~ 100 beats\n// 호흡수 : 1분에 12 ~ 20회\n\nconst Detail = () => {\n\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const WebSocket = require('ws');\n\n    const socket = new window.WebSocket('ws://localhost:8080');\n    socket.onmessage = (event) => {\n      setMessage(event.data);\n      \n      let parse_data = JSON.parse(event.data)\n      let ur = parse_data.user\n      let gx = parse_data.g_x\n      let gy = parse_data.g_y\n      let gz = parse_data.g_z\n\n      // let hr = parse_data.heartrate\n      // let rp = parse_data.resp\n      // let tp = parse_data.temp\n\n      let hr = parse_data.g_x\n      let rp = parse_data.g_y\n      let tp = parse_data.g_z\n      console.log('hr: '+hr)\n      console.log('rp: '+rp)\n      console.log('tp: '+tp)\n      \n      // if (ur===str){\n      //   console.log('ur: '+ur)\n      //   console.log('hr: '+hr)\n      //   console.log('rp: '+rp)\n      //   console.log('tp: '+tp)\n      //   user4_hr=hr;\n      //   user4_rp=rp;\n      //   user4_tp=tp;\n      //   // console.log(message + \"수신\");\n      // }\n    };\n\n    return () => {\n      if(socket.readyState===1){\n        socket.close();\n      }\n    };\n  }, []);\n\n  // useEffect(() => {\n  //   const interval = setInterval(() => {\n  //     setMessage(getData());\n\n  // }, 1000);\n  //   return () => {\n  //     clearInterval(interval);\n  //   };\n  // }, []);\n  \n\n  return (\n    <div className=\"detail\">\n      <p>{message}</p>\n      <div id=\"parent\">\n        <div id=\"title1\"><p id=\"title11\">Heart Rate</p><br/>\n        {<LineChart1 className=\"chart\" id=\"HR_lineChart\" />}\n        </div>\n        <div id=\"title2\"><p id=\"title12\">Respiration Rate</p><br/>\n        {<LineChart2 className=\"chart\" id=\"RR_lineChart\" />}\n        </div>\n        <div id=\"title3\"><p id=\"title13\">Body Temperature</p><br/>\n        {<LineChart3 className=\"chart\" id=\"BT_lineChart\" />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Detail;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}