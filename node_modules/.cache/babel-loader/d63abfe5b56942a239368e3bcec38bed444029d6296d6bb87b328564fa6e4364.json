{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\hpe-example-main\\\\hpe-example-main\\\\my-app\\\\src\\\\Components\\\\detail\\\\Detail1.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n// import arrayData from \"./arrayData\";\n// import objectData from \"./objectData\";\nimport user1 from \"./user1.json\";\n// import ApexChart from 'apexcharts'\n\nimport { ur, hr, rp, tp } from \"C:/Users/user/Downloads/hpe-example-main/hpe-example-main/my-app/src/serve/serve.js\";\n// console.log(ur)\n// console.log(hr)\n// console.log(rp)\n// console.log(tp)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst user1_hr = 0;\nconst user1_rp = 0;\nconst user1_tp = 0;\nif (ur === \"user1\") {\n  hr = user1_hr;\n  rp = user1_rp;\n  tp = user1_tp;\n}\nconst PADDING = 20;\nconst MAX_VALUE = 100;\nconst Y_TICK = 4;\nconst DURATION = 1000 * 30; // 30s\nconst EX_TIME = \"00:00\";\nfunction LineChart1(_ref) {\n  _s();\n  let {\n    id\n  } = _ref;\n  let post1 = user1_hr;\n  const [data, setData] = useState([[Date.now(), post1]]);\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = timeInterval / DURATION * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n      xTimeInterval = timeInterval;\n    };\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 3, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n      let currentTime = startTime - startTime % xTimeInterval;\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = (currentTime - startTime) / DURATION * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = (time - startTime) / DURATION * chartWidth;\n        const yPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post1]]);\n\n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n    return () => clearTimeout(tick);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: id,\n    width: \"600px\",\n    height: \"400px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(LineChart1, \"Z0K8ngcv41Ad13HxX5YZ/nRq6B0=\");\n_c = LineChart1;\nfunction LineChart2(_ref2) {\n  _s2();\n  let {\n    id\n  } = _ref2;\n  let post2 = user1_rp;\n  const [data, setData] = useState([[Date.now(), post2]]);\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = timeInterval / DURATION * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n      xTimeInterval = timeInterval;\n    };\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 3, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n      let currentTime = startTime - startTime % xTimeInterval;\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = (currentTime - startTime) / DURATION * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = (time - startTime) / DURATION * chartWidth;\n        const yPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post2]]);\n\n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n    return () => clearTimeout(tick);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: id,\n    width: \"600px\",\n    height: \"400px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n}\n_s2(LineChart2, \"J2nTEoRXliUPo4qj9xhY4EgyuXw=\");\n_c2 = LineChart2;\nfunction LineChart3(_ref3) {\n  _s3();\n  let {\n    id\n  } = _ref3;\n  let post3 = user1_tp;\n  const [data, setData] = useState([[Date.now(), post3]]);\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = timeInterval / DURATION * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n      xTimeInterval = timeInterval;\n    };\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 3, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n      let currentTime = startTime - startTime % xTimeInterval;\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = (currentTime - startTime) / DURATION * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = (time - startTime) / DURATION * chartWidth;\n        const yPoint = chartHeight - value / MAX_VALUE * (chartHeight - PADDING);\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post3]]);\n\n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n    return () => clearTimeout(tick);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    id: id,\n    width: \"600px\",\n    height: \"400px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this);\n}\n\n// 심박수 : 60 ~ 100 beats\n// 호흡수 : 1분에 12 ~ 20회\n_s3(LineChart3, \"xRpWNiks2p4xXZmVN0G6FrwvDmQ=\");\n_c3 = LineChart3;\nfunction Getdata() {\n  // console.log(\"arrayData: \", typeof arrayData);\n  // console.log(arrayData);\n  // console.log(\"objectData: \", typeof objectData);\n  // console.log(objectData);\n\n  const newArrayData = arrayData.map((item, index) => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: [item.type, \" : \", item.measure, item.unit, \" per \", item.time]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 7\n    }, this);\n  });\n  // return (\n  //   <li key={index}>\n  //     View Vital Signs\n  //     {item.user}'s Vital Signs\n  //     Heart Rate : {item.heartrate} beats/1m\n  //     Respiration Rate : {item.resp} times/1m\n  //     Body Temperature : {item.temp} \n  //   </li>\n  // );\n\n  // console.log(user['user'], user['timestamp'], user['heartrate'], user['resp'], user['temp']);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Getdata\",\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"container\",\n      children: newArrayData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n}\n_c4 = Getdata;\nconst Detail = () => {\n  return (\n    /*#__PURE__*/\n    // <div>\n    // \t{/* <ApexChart >\n    //   </ApexChart> */}\n    // </div>\n    _jsxDEV(\"div\", {\n      className: \"detail\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"signal\",\n        children: \"Heart Rate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(LineChart1, {\n        className: \"chart\",\n        id: \"HR_lineChart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"signal\",\n        children: \"Respiration Rate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(LineChart2, {\n        className: \"chart\",\n        id: \"RR_lineChart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"signal\",\n        children: \"Body Temperature\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(LineChart3, {\n        className: \"chart\",\n        id: \"BT_lineChart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c5 = Detail;\nexport default Detail;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"LineChart1\");\n$RefreshReg$(_c2, \"LineChart2\");\n$RefreshReg$(_c3, \"LineChart3\");\n$RefreshReg$(_c4, \"Getdata\");\n$RefreshReg$(_c5, \"Detail\");","map":{"version":3,"names":["React","useEffect","useState","user1","ur","hr","rp","tp","user1_hr","user1_rp","user1_tp","PADDING","MAX_VALUE","Y_TICK","DURATION","EX_TIME","LineChart1","id","post1","data","setData","Date","now","canvas","document","getElementById","ctx","getContext","canvasWidth","clientWidth","canvasHeight","clientHeight","chartWidth","chartHeight","xFormatWidth","measureText","width","endTime","startTime","xTimeInterval","setXInterval","xPoint","timeInterval","setTime","drawChart","clearRect","beginPath","moveTo","lineTo","yInterval","textAlign","textBaseLine","i","value","YPoint","fillText","stroke","save","rect","clip","currentTime","date","text","getMinutes","getSeconds","forEach","datum","index","time","yPoint","restore","window","requestAnimationFrame","tick","setTimeout","before","length","slice","clearTimeout","LineChart2","post2","LineChart3","post3","Getdata","newArrayData","arrayData","map","item","type","measure","unit","Detail"],"sources":["C:/Users/user/Downloads/hpe-example-main/hpe-example-main/my-app/src/Components/detail/Detail1.js"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport \"./styles.css\";\n// import arrayData from \"./arrayData\";\n// import objectData from \"./objectData\";\nimport user1 from \"./user1.json\";\n// import ApexChart from 'apexcharts'\n\nimport { ur, hr, rp, tp } from \"C:/Users/user/Downloads/hpe-example-main/hpe-example-main/my-app/src/serve/serve.js\"\n// console.log(ur)\n// console.log(hr)\n// console.log(rp)\n// console.log(tp)\nconst user1_hr = 0;\nconst user1_rp = 0;\nconst user1_tp = 0;\n\nif (ur===\"user1\"){\n  hr=user1_hr;\n  rp=user1_rp;\n  tp=user1_tp;\n}\n\nconst PADDING = 20;\nconst MAX_VALUE = 100;\nconst Y_TICK = 4;\nconst DURATION = 1000 * 30; // 30s\nconst EX_TIME = \"00:00\";\n\nfunction LineChart1({ id }) {\n  \n  let post1 = user1_hr;\n  const [data, setData] = useState([[Date.now(), post1]]);  \n\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = (timeInterval / DURATION) * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n\n      xTimeInterval = timeInterval;\n    };\n\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 3, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n\n      let currentTime = startTime - (startTime % xTimeInterval);\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = ((currentTime - startTime) / DURATION) * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = ((time - startTime) / DURATION) * chartWidth;\n        const yPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post1]]);\n        \n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n\n    return () => clearTimeout(tick);\n  }, [data]);\n\n  return (\n    <canvas id={id} width=\"600px\" height=\"400px\"></canvas>\n  );\n}\n\nfunction LineChart2({ id }) {\n  let post2 = user1_rp;\n  const [data, setData] = useState([[Date.now(), post2]]);  \n\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = (timeInterval / DURATION) * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n\n      xTimeInterval = timeInterval;\n    };\n\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 3, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n\n      let currentTime = startTime - (startTime % xTimeInterval);\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = ((currentTime - startTime) / DURATION) * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = ((time - startTime) / DURATION) * chartWidth;\n        const yPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post2]]);\n        \n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n\n    return () => clearTimeout(tick);\n  }, [data]);\n\n  return (\n    <canvas id={id} width=\"600px\" height=\"400px\"></canvas>\n  );\n}\n\nfunction LineChart3({ id }) {\n  let post3 = user1_tp;\n  const [data, setData] = useState([[Date.now(), post3]]);  \n\n  useEffect(() => {\n    const canvas = document.getElementById(id);\n    const ctx = canvas.getContext(\"2d\");\n    const canvasWidth = canvas.clientWidth;\n    const canvasHeight = canvas.clientHeight;\n    const chartWidth = canvasWidth - PADDING;\n    const chartHeight = canvasHeight - PADDING;\n    const xFormatWidth = ctx.measureText(EX_TIME).width;\n    let endTime, startTime, xTimeInterval;\n\n    const setXInterval = () => {\n      let xPoint = 0;\n      let timeInterval = 1000;\n      while (true) {\n        xPoint = (timeInterval / DURATION) * chartWidth;\n        if (xPoint > xFormatWidth) break;\n        timeInterval *= 2;\n      }\n\n      xTimeInterval = timeInterval;\n    };\n\n    const setTime = () => {\n      endTime = Date.now();\n      startTime = endTime - DURATION;\n      setXInterval();\n    };\n\n    const drawChart = () => {\n      setTime();\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      ctx.beginPath();\n      ctx.moveTo(PADDING, PADDING);\n      // draw Y axis\n      ctx.lineTo(PADDING, chartHeight);\n      const yInterval = MAX_VALUE / Y_TICK;\n      ctx.textAlign = \"right\";\n      ctx.textBaseLine = \"middle\";\n      for (let i = 0; i <= Y_TICK; i++) {\n        const value = yInterval * i;\n        const YPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n        ctx.fillText(value, PADDING - 3, YPoint); // 간격 3px\n      }\n\n      // draw X axis\n      ctx.lineTo(chartWidth, chartHeight);\n      ctx.stroke();\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(PADDING, 0, chartWidth, canvasHeight);\n      ctx.clip();\n\n      let currentTime = startTime - (startTime % xTimeInterval);\n      ctx.textBaseLine = \"top\";\n      ctx.textAlign = \"center\";\n      while (currentTime < endTime + xTimeInterval) {\n        const xPoint = ((currentTime - startTime) / DURATION) * chartWidth;\n        const date = new Date(currentTime);\n        const text = date.getMinutes() + \":\" + date.getSeconds();\n\n        ctx.fillText(text, xPoint, chartHeight + PADDING);\n        currentTime += xTimeInterval;\n      }\n\n      // draw data\n      ctx.beginPath();\n      data.forEach((datum, index) => {\n        const [time, value] = datum;\n        const xPoint = ((time - startTime) / DURATION) * chartWidth;\n        const yPoint =\n          chartHeight - (value / MAX_VALUE) * (chartHeight - PADDING);\n\n        if (!index) {\n          ctx.moveTo(xPoint, yPoint);\n        } else {\n          ctx.lineTo(xPoint, yPoint);\n        }\n      });\n      ctx.stroke();\n      ctx.restore();\n      window.requestAnimationFrame(drawChart);\n    };\n\n    const tick = () => {\n      return setTimeout(() => {\n        const before = data.length >= 30 ? data.slice(1) : data.slice();\n        setData([...before, [Date.now(), post3]]);\n        \n        // console.log(data);\n      }, 1000);\n    };\n    drawChart();\n    tick();\n\n    return () => clearTimeout(tick);\n  }, [data]);\n\n  return (\n    <canvas id={id} width=\"600px\" height=\"400px\"></canvas>\n  );\n}\n\n// 심박수 : 60 ~ 100 beats\n// 호흡수 : 1분에 12 ~ 20회\nfunction Getdata() {\n  // console.log(\"arrayData: \", typeof arrayData);\n  // console.log(arrayData);\n  // console.log(\"objectData: \", typeof objectData);\n  // console.log(objectData);\n  \n  const newArrayData = arrayData.map((item, index) => {\n\n    return (\n      <li key={index}>\n        {item.type} : {item.measure}{item.unit} per {item.time}\n      </li>\n    );\n  });\n  // return (\n  //   <li key={index}>\n  //     View Vital Signs\n  //     {item.user}'s Vital Signs\n  //     Heart Rate : {item.heartrate} beats/1m\n  //     Respiration Rate : {item.resp} times/1m\n  //     Body Temperature : {item.temp} \n  //   </li>\n  // );\n\n  // console.log(user['user'], user['timestamp'], user['heartrate'], user['resp'], user['temp']);\n\n  return (\n    <div className=\"Getdata\">\n      <ul className=\"container\">{newArrayData}</ul>\n      {/* <h1>{objectData.welcomeMessage}</h1>\n      <h2>you connected to {objectData.localAddress}</h2>\n      {objectData.isDevEnv ? (\n        <span>data from arrayData.json</span>\n      ) : null} */}\n    </div>\n  );\n}\n\nconst Detail = () => {\n  return (\n    // <div>\n  \t// \t{/* <ApexChart >\n\n    //   </ApexChart> */}\n\n\t  // </div>\n    <div className=\"detail\">\n      <p className=\"signal\">Heart Rate</p>\n      {<LineChart1 className=\"chart\" id=\"HR_lineChart\" />}\n      <p className=\"signal\">Respiration Rate</p>\n      {<LineChart2 className=\"chart\" id=\"RR_lineChart\" />}\n      <p className=\"signal\">Body Temperature</p>\n      {<LineChart3 className=\"chart\" id=\"BT_lineChart\" />}\n      {/* {<Getdata className=\"json\" id=\"data\" />} */}\n    </div>\n  );\n}\n\nexport default Detail;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}